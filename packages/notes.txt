Steps:
Thanks to https://medium.com/@jsilvax/a-workflow-guide-for-lerna-with-yarn-workspaces-60f97481149d

1. yarn config set workspaces-experimental true
2.  mkdir my-design-system && cd my-design-system
3. yarn init
4. yarn add lerna --dev
initialize Lerna,
which will create a lerna.json and a packages directory
5. lerna init
In order to set up Lerna with Yarn workspaces,
we need to configure the lerna.json
6. // lerna.json
{
  "packages": ["packages/*"],
  "version": "independent",
  "npmClient": "yarn",
  "useWorkspaces": true
}

7. At this point we should only have a root package.json.
In this root package.json we need to add workspaces and private to true.
Setting private to true will prevent the root project from being published to NPM.
// package.json
{
  "name": "my-design-system",
  "private": true,
  "workspaces": [
     "packages/*"
  ]
}


Flow for Creating a New Package
1. cd packages
2. mkdir my-design-system-form && cd my-design-system-form
3. then we create a new package.json by running yarn init:
yarn init

4. The new name should follow our NPM Org scope ex. @my-scope-name
It’s also important to have the new package start at a version like 0.0.0
because once we do our first publish using Lerna,
it’ll be published at 0.1.0 or 1.0.0.
// package.json
{
  "name": "@my-scope-name/my-design-system-form",
  "version" : "0.0.0",
  "main" : "index.js"
}

If you have an NPM Org Account which supports private packages,
you can add the following to your module’s individual package.json
"publishConfig": {
    "access": "restricted"
}

Adding a Local Sibling Dependency to a Specific Package
my-design-system/
    packages/
        my-design-system-core/
        my-design-system-form/
        my-design-system-button/
If we wanted to add the my-design-system-button as a dependency
to our my-design-system-form and have Lerna symlink them,
we can do so by cd into that package

cd my-design-system-form
lerna add @my-scope-name/design-system-button --scope=@my-scope-name/my-design-system-form

This will update the package.json of @my-scope-name/my-design-system-form.
// package.json
{
  "name": "@my-scope-name/my-design-system-form",
  "version": "1.0.0",
  "main": "index.js",
  "dependencies": {
    "@my-scope-name/my-design-system-button": "^1.0.0"
  }
}
Now you can reference this local dependency in index.js like
import Button from '@my-scope-name/my-design-system-button';

Adding a “common” dependency to ALL packages
Doing this is similar to the previous command.
This would be for /packages/*.
It doesn’t matter if they’re local sibling dependencies or from NPM
lerna add the-dep-name

If you have common dev dependencies, it’s better to specify
them in the workspace root package.json.
For instance, this can be dependencies
like Jest, Husky, Storybook, Eslint, Prettier, etc
yarn add husky --dev -W

*Adding the -W flag makes it explicit
that we’re adding the dependency to the workspace root.



Removing Dependencies
If there’s a dependency that all packages use but that you want
to remove, Lerna has the exec command that runs an arbitrary
command in each package. With this knowledge,
we can use exec to remove a dependency on all packages.

lerna exec -- yarn remove dep-name



Running Tests
Lerna provides the run command which will
run an npm script in each package that contains that script.
For instance, say all of our packages follow the structure of my-design-system-form:
my-design-system-form/
    __tests__/
        Form.test.js
and in each package.json we have the test npm script
"name": "@my-scope-name/my-design-system-form",
"scripts": {
    "test": "jest"
}

Then Lerna can execute each test script by running:
lerna run test --stream
*The — stream flag just provides output from the child processes



Publishing to NPM
Manual
First, you need to make sure you’re logged in.
You can verify that you’re logged in by doing
npm whoami // myusername
else
npm login

Once logged in you can have Lerna publish by running:
lerna publish

Lerna will prompt you to update the version numbers.


Automatic
Lerna supports the use of the Conventional Commits Standard to automate
Semantic Versioning in a CI environment.
This gives developers the ability to commit messages like
git commit -m "fix: JIRA-1234 Fixed minor bug in foo"

Then in a CI environment, the packages version’s can be updated
and published to NPM based on commits like the one above.
This is done by configuring your CI environment to run:
lerna publish --conventional-commits --yes

If you don’t want to pass flags, add the following to
your lerna.json file
"command": {
    "publish": {
       "conventionalCommits": true,
       "yes": true
    }
}

Split Versioning and Publishing
If for whatever reason you want full control of the versioning,
Lerna has the ability to split versioning and publishing into
two commands.
lerna version
Then follow the prompts to update the individual version numbers.
Then you can have a step that will read the latest tag
(that was manually updated) to publish to NPM:
lerna publish from-git --yes




Local Development with Multiple Contributors
Anytime a new contributor does a git clone of your project or you
need to pull your team’s latest changes you have
to run the yarn command:
yarn

In most Lerna tutorials, it is advocated to use the
lerna bootstrap command, however when yarn workspaces
is enabled this is unecessary and redundant.





Cross Project Local Development
In our example, we are building a multi-package design system.
If a developer wanted to create a new component in the design
system but also test it out in a local client application before
it’s published, they can do so by using yarn’s link command.
To symlink a local dependency
Say we want to use our local my-design-system-core in my-client-app

cd ~/path/to/my-design-system/my-design-system-core
yarn link

Now if symlink is success
cd ~/path/to/my-client-app
yarn link @my-scope-name/my-design-system-core

Any changes in /packages/my-design-system-core will be reflected
in my-client-app.
Now a developer can easily do local development on
both projects and see it reflected.

To unlink a local dependency
CD into the package we want to unlink
cd ~/path/to/my-design-system/my-design-system-core
yarn unlink

cd ~/path/to/my-client-app
yarn unlink @my-scope-name/my-design-system-core

